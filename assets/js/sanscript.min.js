/**
 * Sanscript
 *
 * Sanscript is a Sanskrit transliteration library. Currently, it supports
 * Harvard-Kyoto, IAST, ITRANS, Devanagari, and various romanizations.
 *
 * Released under the MIT and GPL Licenses.
 */

(function(global) {
"use strict";

// Transliteration
var schemes = {
    /* Devanagari
     * ----------
     * The most comprehensive and unambiguous Brahmi script for Sanskrit.
     * The correct pronunciation is best learned from a trained speaker.
     */
    "devanagari": {
        "vowels": ["अ", "आ", "इ", "ई", "उ", "ऊ", "ऋ", "ॠ", "ऌ", "ॡ", "ए", "ऐ", "ओ", "औ"],
        "vowel_marks": ["ा", "ि", "ी", "ु", "ू", "ृ", "ॄ", "ॢ", "ॣ", "े", "ै", "ो", "ौ"],
        "other_marks": ["ं", "ः", "ँ"],
        "virama": ["्"],
        "consonants": ["क", "ख", "ग", "घ", "ङ", "च", "छ", "ज", "झ", "ञ", "ट", "ठ", "ड", "ढ", "ण", "त", "थ", "द", "ध", "न", "प", "फ", "ब", "भ", "म", "य", "र", "ल", "व", "श", "ष", "स", "ह", "ळ", "क्ष", "ज्ञ"],
        "symbols": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९", "ॐ", "ऽ", "।", "॥"],
        "zwj": ["\u200D"],
        "skip": [""],
        "accent": ["\u0951", "\u0952"],
        "combo_accent": ["ः॑", "ः॒", "ं॑", "ं॒"],
        "other": ["", "", "", "", ""]
    },

    /* Harvard-Kyoto
     * -------------
     * A simple 1:1 mapping.
     */
    "hk": {
        "vowels": ["a", "A", "i", "I", "u", "U", "R", "RR", "lR", "lRR", "e", "ai", "o", "au"],
        "other_marks": ["M", "H", "~"],
        "virama": [""],
        "consonants": ["k", "kh", "g", "gh", "G", "c", "ch", "j", "jh", "J", "T", "Th", "D", "Dh", "N", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "z", "S", "s", "h", "L", "kS", "jJ"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "OM", "'", "|", "||"],
        "skip": ["_"]
    },

    /* IAST
     * ----
     * The International Alphabet of Sanskrit Transliteration (IAST) is the academic
     * standard for Latin transliteration of Sanskrit. IAST is the de facto standard used in
     * printed publications, like books and magazines, due to its appealing aesthetics.
     */
    "iast": {
        "vowels": ["a", "ā", "i", "ī", "u", "ū", "ṛ", "ṝ", "ḷ", "ḹ", "e", "ai", "o", "au"],
        "other_marks": ["ṃ", "ḥ", "m̐"],
        "virama": [""],
        "consonants": ["k", "kh", "g", "gh", "ṅ", "c", "ch", "j", "jh", "ñ", "ṭ", "ṭh", "ḍ", "ḍh", "ṇ", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "ś", "ṣ", "s", "h", "ḻ", "kṣ", "jñ"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "oṃ", "'", "|", "||"],
        "skip": ["_"]
    },

    /* ITRANS
     * ------
     * One of the first widely used transliteration schemes on the Internet.
     * ITRANS is associated with the usenet group rec.music.indian.classical.
     */
    "itrans": {
        "vowels": ["a", "A", "i", "I", "u", "U", "RRi", "RRI", "LLi", "LLI", "e", "ai", "o", "au"],
        "other_marks": ["M", "H", ".N"],
        "virama": [""],
        "consonants": ["k", "kh", "g", "gh", "~G", "ch", "Ch", "j", "jh", "~J", "T", "Th", "D", "Dh", "N", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "sh", "Sh", "s", "h", "L", "x", "GY"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "OM", ".a", "|", "||"],
        "skip": ["_"]
    },

    /* SLP1
     * ----
     * Sanskrit Library Phonetic Basic encoding.
     */
    "slp1": {
        "vowels": ["a", "A", "i", "I", "u", "U", "f", "F", "x", "X", "e", "E", "o", "O"],
        "other_marks": ["M", "H", "~"],
        "virama": ["_"],
        "consonants": ["k", "K", "g", "G", "N", "c", "C", "j", "J", "Y", "w", "W", "q", "Q", "R", "t", "T", "d", "D", "n", "p", "P", "b", "B", "m", "y", "r", "l", "v", "S", "z", "s", "h", "L", "kz", "jY"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "oM", "'", "|", "||"],
        "skip": ["_"]
    },

    /* Velthuis
     * --------
     * A case-sensitive Sanskrit encoding.
     */
    "velthuis": {
        "vowels": ["a", "aa", "i", "ii", "u", "uu", ".r", ".rr", ".li", ".ll", "e", "ai", "o", "au"],
        "other_marks": [".m", ".h", ".N"],
        "virama": [""],
        "consonants": ["k", "kh", "g", "gh", "\\.n", "c", "ch", "j", "jh", "\\~n", ".t", ".th", ".d", ".dh", ".n", "t", "th", "d", "dh", "n", "p", "ph", "b", "bh", "m", "y", "r", "l", "v", "\\'s", ".s", "s", "h", "L", "k.s", "j\\~n"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "o.m", "'", "|", "||"],
        "skip": ["_"]
    },

    /* WX
     * --
     * As used in Monier-Williams and HUET.
     */
    "wx": {
        "vowels": ["a", "A", "i", "I", "u", "U", "q", "Q", "L", "", "e", "E", "o", "O"],
        "other_marks": ["M", "H", "z"],
        "virama": [""],
        "consonants": ["k", "K", "g", "G", "f", "c", "C", "j", "J", "F", "t", "T", "d", "D", "N", "w", "W", "x", "X", "n", "p", "P", "b", "B", "m", "y", "r", "l", "v", "S", "R", "s", "h", "", "kR", "jF"],
        "symbols": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "oM", "'", "|", "||"],
        "skip": ["_"]
    }
};

var Sanscript = {

    schemes: schemes,

    t: function(data, from, to) {
        var fromScheme = schemes[from];
        var toScheme = schemes[to];
        
        if (!fromScheme) {
            return "Source scheme not recognized.";
        }
        if (!toScheme) {
            return "Destination scheme not recognized.";
        }

        // Easy way out
        if (from === to) {
            return data;
        }
        
        var step1 = transliterate(data, fromScheme, toScheme);
        return step1;
    }
};

// Transliteration states
var vowel_marks = 0,
    consonants = 1,
    consonants_with_vowel = 2,
    consonants_with_viraam = 3;

/**
 * Given a phonetic string in one of the supported schemes, transliterate it to
 * another scheme.
 *
 * @param data     the string to transliterate
 * @param from     the source scheme
 * @param to       the destination scheme
 * @return         the transliterated string
 */
function transliterate(data, from, to) {
    var buf = [],
        toSchemeData = schemes[to],
        letters = [],
        marks = null;

    for (var pos = 0; pos < data.length; pos++) {
        var current_ch = data.charAt(pos),
            current_block = null,
            match = null;

        if (marks === vowel_marks) {
            match = match_letter(current_ch, fromVowels(from));
            marks = match ? consonants_with_vowel : consonants;
        } else {
            match = match_letter(current_ch, fromConsonants(from));
            if (match) {
                current_block = [match];
                marks = consonants_with_viraam;
            } else {
                match = match_letter(current_ch, fromVowels(from));
                if (match) {
                    buf.push(toSchemeData.vowels[match]);
                    marks = vowel_marks;
                } else {
                    match = match_letter(current_ch, fromOther(from));
                    if (match) {
                        buf.push(toSchemeData.other_marks[match]);
                        marks = vowel_marks;
                    } else {
                        if (current_ch !== ' ') {
                            buf.push(current_ch);
                        } else {
                            buf.push(' ');
                        }
                    }
                }
            }
        }
    }
    return buf.join('');
}

function fromConsonants(from) {
    return schemes[from].consonants;
}
function fromVowels(from) {
    return schemes[from].vowels;
}
function fromOther(from) {
    return schemes[from].other_marks;
}

function match_letter(letter, scheme) {
    if (!scheme) {
        return false;
    }
    for (var i = 0; i < scheme.length; i++) {
        var s = scheme[i];
        if (s === letter) {
            return i;
        }
    }
    return false;
}

if (typeof module !== 'undefined') {
    module.exports = Sanscript;
} else {
    global.Sanscript = Sanscript;
}

}(typeof window !== 'undefined' ? window : global));